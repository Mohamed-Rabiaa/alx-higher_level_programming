# 2-matrix_divided.txt
======================

Using matrix_divided
--------------------

This is an example text file in reStructuredText format.  First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:
Matrix of integers:
------------------
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3)
    [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

    >>> matrix_divided([[8, 6, 2]], 2)
    [4.0, 3.0, 1.0]

Matrix of floats:
----------------
    >>> matrix_divided([[9.0, 5.5, 3.3], [4.1, -10.8, 12.4]], 3)
    [[3.0, 1.83, 1.1], [1.37, -3.6, 4.13]]

    >>> matrix_divided([[5.0, 6.3], [8.2, 4.4], [7.0, 9.5]], 4)
    [[1.25, 1.57], [2.05, 1.1], [1.75, 2.38]]

None Matrix:
-----------
    >>> matrix_divided(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix contains Strings:
-----------------------
    >>> matrix_divided([[1, "2", 3],[4, 5, 6]], 4)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix contains unequal rows:
----------------------------
    >>> matrix_divided([[11, 20, 8], [7, 15]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

div is float:
------------
    >>> matrix_divided([[10, 20], [30, 40]], 5.0)
    [[2.0, 4.0], [6.0, 8.0]]

div is a string:
---------------
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "2")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

div is zero:
-----------
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    TypeError: division by zero
